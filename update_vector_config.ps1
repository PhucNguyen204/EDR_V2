# Script ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t Vector config v·ªõi file log m·ªõi nh·∫•t
param(
    [string]$VectorConfigPath = "C:\Vector\vector.toml",
    [string]$WinlogbeatLogPath = "C:\Winlogbeat\logs"
)

Write-Host "=== Vector Config Auto-Update Script ===" -ForegroundColor Green

# 1. T√¨m file log m·ªõi nh·∫•t
Write-Host "`n1. T√¨m file Winlogbeat log m·ªõi nh·∫•t..."
$latestLogFile = Get-ChildItem -Path $WinlogbeatLogPath -Filter "*.ndjson" | 
    Sort-Object LastWriteTime -Descending | 
    Select-Object -First 1

if (-not $latestLogFile) {
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y file log n√†o trong $WinlogbeatLogPath" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ File log m·ªõi nh·∫•t: $($latestLogFile.Name)" -ForegroundColor Green
Write-Host "   Size: $([math]::Round($latestLogFile.Length / 1MB, 2)) MB"
Write-Host "   Last Modified: $($latestLogFile.LastWriteTime)"

# 2. Backup config hi·ªán t·∫°i
Write-Host "`n2. Backup Vector config hi·ªán t·∫°i..."
$backupPath = "$VectorConfigPath.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
Copy-Item $VectorConfigPath $backupPath
Write-Host "‚úÖ Backup saved to: $backupPath" -ForegroundColor Green

# 3. ƒê·ªçc config hi·ªán t·∫°i
Write-Host "`n3. ƒê·ªçc Vector config hi·ªán t·∫°i..."
$configContent = Get-Content $VectorConfigPath -Raw

# 4. C·∫≠p nh·∫≠t include path v·ªõi file c·ª• th·ªÉ
Write-Host "`n4. C·∫≠p nh·∫≠t include path v·ªõi file c·ª• th·ªÉ..."
$specificFile = $latestLogFile.FullName
$newIncludeLine = "  include = [""$specificFile""]"

# T√¨m v√† thay th·∫ø d√≤ng include
$pattern = 'include\s*=\s*\[.*?\]'
$updatedConfig = $configContent -replace $pattern, $newIncludeLine

# 5. Ghi config m·ªõi
Write-Host "`n5. Ghi Vector config m·ªõi..."
Set-Content -Path $VectorConfigPath -Value $updatedConfig -Encoding UTF8
Write-Host "‚úÖ Config ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi file: $($latestLogFile.Name)" -ForegroundColor Green

# 6. Validate config
Write-Host "`n6. Validate Vector config..."
try {
    $validationResult = & "C:\Vector\bin\vector.exe" validate --config-dir "C:\Vector" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Vector config validation th√†nh c√¥ng" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Vector config validation th·∫•t b·∫°i:" -ForegroundColor Red
        Write-Host $validationResult
        # Restore backup
        Copy-Item $backupPath $VectorConfigPath
        Write-Host "üîÑ ƒê√£ restore config t·ª´ backup" -ForegroundColor Yellow
        exit 1
    }
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ validate Vector config: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 7. Restart Vector
Write-Host "`n7. Restart Vector service..."
Write-Host "   Stopping Vector processes..."
Get-Process | Where-Object {$_.ProcessName -like "*vector*"} | Stop-Process -Force -ErrorAction SilentlyContinue

Write-Host "   Waiting 3 seconds..."
Start-Sleep -Seconds 3

Write-Host "   Starting Vector with new config..."
Start-Process -FilePath "C:\Vector\bin\vector.exe" -ArgumentList "--config", $VectorConfigPath -WindowStyle Hidden

Write-Host "   Waiting 10 seconds for Vector to start..."
Start-Sleep -Seconds 10

# 8. Ki·ªÉm tra Vector status
Write-Host "`n8. Ki·ªÉm tra Vector status..."
$vectorProcesses = Get-Process | Where-Object {$_.ProcessName -like "*vector*"}
if ($vectorProcesses) {
    Write-Host "‚úÖ Vector ƒëang ch·∫°y:" -ForegroundColor Green
    $vectorProcesses | Select-Object ProcessName, Id, CPU, WorkingSet | Format-Table -AutoSize
} else {
    Write-Host "‚ùå Vector kh√¥ng ch·∫°y ƒë∆∞·ª£c" -ForegroundColor Red
    exit 1
}

# 9. Test v·ªõi m·ªôt s·ªë events
Write-Host "`n9. Test Vector v·ªõi m·ªôt s·ªë events..."
Write-Host "   Ch·∫°y m·ªôt s·ªë ti·∫øn tr√¨nh test..."
powershell -Command "Get-Process | Where-Object {`$_.ProcessName -like '*test*'} | Stop-Process -Force" | Out-Null
cmd /c "echo Test Vector update && whoami" | Out-Null

Write-Host "   Ch·ªù 5 gi√¢y ƒë·ªÉ Vector x·ª≠ l√Ω..."
Start-Sleep -Seconds 5

# 10. Ki·ªÉm tra Vector output
Write-Host "`n10. Ki·ªÉm tra Vector output..."
$outputFile = "C:\Vector\out\all-events.ndjson"
if (Test-Path $outputFile) {
    $fileInfo = Get-Item $outputFile
    Write-Host "‚úÖ Vector output file:" -ForegroundColor Green
    Write-Host "   File: $($fileInfo.Name)"
    Write-Host "   Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
    Write-Host "   Last Modified: $($fileInfo.LastWriteTime)"
    
    Write-Host "`n   Last 3 events:"
    Get-Content $outputFile -Tail 3 | ForEach-Object {
        try {
            $event = $_ | ConvertFrom-Json
            Write-Host "   - Event Type: $($event.event_type) | Event ID: $($event.EventID) | Image: $($event.Image)"
        } catch {
            Write-Host "   - Raw: $_"
        }
    }
} else {
    Write-Host "‚ùå Vector output file kh√¥ng t·ªìn t·∫°i" -ForegroundColor Red
}

Write-Host "`n=== Vector Config Update Completed ===" -ForegroundColor Green
Write-Host "Vector da duoc cap nhat va restart voi file log moi nhat" -ForegroundColor Green
Write-Host "File log dang duoc doc: $($latestLogFile.Name)" -ForegroundColor Cyan
Write-Host "Config backup: $backupPath" -ForegroundColor Cyan
